*** Input to be the list of bools(pressed) and M2(cross, req)
*** op genInput(list(bools), M2) => genInput(tail(bools), M2) :
*** pressed |-> head(bools), M2 output M3 
*** List of bool output


(tomod RUNG is protecting NAT-TIME-DOMAIN .
  
  sorts Rung Coil Contact .
  subsorts Coil Contact < Rung .

  ops lland llor : Rung Rung -> Rung .
  op coil : signal -> Coil [ctor] .
  ops cont necont : signal -> Contact [ctor] .


endtom)

(tomod PELICANCROSSING is protecting NAT-TIME-DOMAIN .
 
  sort signal .
  ops req crossing crossing' pressed req' tlag tlbg tlar tlbr plag plbg plar plbr : -> signal .

endtom)


(view PELI from TRIV to PELICANCROSSING is
    sort Elt to signal .
endv)

(view Rungs from TRIV to RUNG is
    sort Elt to Rung .
endv)

(tomod LLINTERLOCKING is protecting NAT-TIME-DOMAIN . 
  protecting MAP{PELI,Bool}  * (sort Map{PELI,Bool} to MapNB,
                               sort Entry{PELI,Bool} to EntryNB) .
  protecting RUNG .
  protecting PELICANCROSSING .
  protecting LIST{Rungs} .
  protecting LIST{Bool} .

  class Inter | ladderlogic : List{Rungs}, inputs : MapNB, outputs : MapNB .
  
  op evalll : Rung MapNB MapNB -> MapNB .
  op evalrung : Rung MapNB MapNB -> Bool .
  op getcoil : Rung -> signal .  
  op myinter : -> Oid .
  op evalll2 :  List{Rungs} MapNB MapNB -> MapNB .
*** remove first map
  op genInput : List{Bool} MapNB -> MapNB .
  op unprime : MapNB -> MapNB .
  op prime : signal -> signal .
  op gen : MapNB -> MapNB .

  var rlist : List{Rungs} .
  var O : Oid .
  vars R R1 R2 : Rung .
  vars M1 M2 M3 : MapNB .
  vars E1 E2 : EntryNB .
  vars N1 N2 : signal .
  var LB : List{Bool} .
  *** eq genInput(LB, M3) = (pressed |-> head(LB), M3) .

  crl [eval] :  {< O : Inter | ladderlogic : rlist, inputs : genInput(LB, M3), outputs : M2 >} => {< O : Inter | ladderlogic : rlist,  inputs : genInput(tail(LB), M3), outputs : gen(evalll2(rlist,genInput(LB, M3),empty)) >} in time 1 if size(LB) > 0 .

  *** crl [eval] :  {< O : Inter | ladderlogic : rlist, inputs : genInput(LB, M3), outputs : M2 >} => {< O : Inter | ladderlogic : rlist,  inputs : empty, outputs : M2 >} if size(LB) == 0 .
  rl [g] : gen(evalll2(rlist,genInput(LB, M3),M2)) => evalll2(rlist,(pressed |-> head(LB), M3),M2) .

  rl [gen] : genInput(LB, M2) => (pressed |-> head(LB), M2) .
  crl [evalll2] : evalll2(rlist,M1,M2) => M2 if size(rlist) == 0 . 
  crl [evalll3] : evalll2(rlist,M1,M2) => evalll2(tail(rlist), M1, evalll(head(rlist),M1,M2)) if size(rlist) > 0 . 
  
  rl [compcoil] : evalll(R,M1,M2) => insert(getcoil(R) ,evalrung(R,M1,M2) , M2) .
  
  rl [comprung] : evalrung(coil(N1),M1,M2) => true .
  rl [comprung2] : evalrung(lland(R,R1),M1,M2) => evalrung(R,M1,M2) and evalrung(R1,M1,M2) .
  rl [comprung3] : evalrung(llor(R,R1),M1,M2) => evalrung(R,M1,M2) or evalrung(R1,M1,M2) .
  rl [comprung4] : evalrung(cont(N1),M1,M2) => M1[N1] .
  rl [comprung5] : evalrung(necont(N1),M1,M2) => not M1[N1] .

  rl [getcoil] : getcoil(lland(R1,R2)) => getcoil(R2) .
  rl [getcoil2] : getcoil(coil(N1)) => N1 . 
  
  ***rl [prime] : prime(N1) => prime(N1) .
  rl [unprime] : unprime(M3) => M3 .
endtom)

(tomod example is protecting NAT-TIME-DOMAIN .
protecting LLINTERLOCKING .
vars A B : Bool .
vars req2 crossing2 pressed2 : Bool .
ops crossing' req' : Bool Bool -> Bool .
eq crossing'(A,B) = A and not B .
eq req'(A,B) = A and not B .

ops ladder1 ladder2 ladder3 ladder4 ladder5 ladder6 ladder7 ladder8 ladder9 ladder10 : -> Rung .
ops map1 : Bool Bool Bool -> MapNB .
ops conf1 : Bool Bool Bool -> Configuration .
eq ladder1 = lland(cont(req),lland(necont(crossing),coil(crossing'))) .
eq ladder2 = lland(cont(pressed),lland(necont(req),coil(req'))) .
eq ladder3 = lland(lland(llor(necont(pressed),cont(req')),necont(crossing')),coil(tlag)) .
eq ladder4 = lland(lland(llor(necont(pressed),cont(req')),necont(crossing')),coil(tlbg)) .
eq ladder5 = lland(cont(crossing'),coil(tlar)) .
eq ladder6 = lland(cont(crossing'),coil(tlbr)) .
eq ladder7 = lland(cont(crossing'),coil(plag)) .
eq ladder8 = lland(cont(crossing'),coil(plbg)) .
eq ladder9 = lland(necont(crossing'),coil(plar)) .
eq ladder10 = lland(necont(crossing'),coil(plbr)) .

endtom)
 (trew {< myinter : Inter | ladderlogic : lland(cont(pressed),lland(necont(req),coil(req))) lland(cont(pressed),lland(cont(req),coil(crossing))), inputs : genInput(false true true true, (req |-> false, crossing |-> false)), outputs : empty >} in time <= 12 .)

***(rew evalll2(lland(cont(pressed),lland(necont(req),coil(req'))),genInput(true false, (req |-> false)), empty ) .)

*** (rew genInput(true false true , (crossing |-> false, req |-> true)) .)
*** (rew prime(req) .)