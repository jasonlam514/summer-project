 *** crl [comprung] : evalrung(lland(cont(N1), R1),M1,M2) => M2[N1] and evalrung(R1,M1,M2) if $hasMapping(M2,N1) .
***(rew evalrung(lland(necont(1),lland(cont(2),coil(3))),(1 |-> false, 2 |-> true),(3 |-> false)) .)
**** evaluates the ladder logic rung [1]-(2) with 1 set to true in the input mapping.
***(rew evalrung(lland(cont(1),coil(2)), (1 |-> true), (2 |-> false)) .)
*** evaluates the ladder logic rung [3]-[1]-(2) with 3 set to false and 1 set to true in the input mapping
***(rew evalrung(lland(cont(3),lland(cont(1),coil(2))), (1 |-> true, 3 |-> false), (2 |-> false)) .)
*** evaluates the above ladder logic rung in the interlocking class 
***(trew {< myinter : Inter | ladderlogic : (lland(cont(3),lland(cont(1),coil(2)))), inputs : (1 |-> true, 3 |-> false), outputs : empty > } in time <= 2 .)

(tomod RUNG is protecting NAT-TIME-DOMAIN .
  
  sorts Rung Coil Contact .
  subsorts Coil Contact < Rung .

  ops lland llor : Rung Rung -> Rung .
  op coil : Nat -> Coil [ctor] .
  ops cont necont : Nat -> Contact [ctor] .


endtom)

(view Rungs from TRIV to RUNG is
    sort Elt to Rung .
endv)


(tomod LLINTERLOCKING is protecting NAT-TIME-DOMAIN . 
  protecting MAP{Nat,Bool}  * (sort Map{Nat,Bool} to MapNB,
                               sort Entry{Nat,Bool} to EntryNB) .
  protecting RUNG .
  protecting LIST{Rungs} .
  protecting LIST{Bool} .

*** This class Inter includes attributes ladderlogic, inputs in the format of ([contact id] |-> Boolean) and outputs which can be left as empty.
  class Inter | ladderlogic : List{Rungs}, inputs : MapNB, outputs : MapNB .
  
  op evalll : Rung MapNB MapNB -> MapNB .
  op evalrung : Rung MapNB MapNB -> Bool .
  op getcoil : Rung -> Nat .  
  op myinter : -> Oid .
  op evalll2 :  List{Rungs} MapNB MapNB -> MapNB .


  var rlist : List{Rungs} .
  var O : Oid .
  vars R R1 R2 : Rung .
  vars M1 M2 : MapNB .
  vars E1 E2 : EntryNB .
  vars N1 N2 : Nat .

*** We compute the first rung from attribute ladderlogic, this rewrite rule will be applied until all rungs have been computed, the number of rungs will decrease by 1 and the output will increase by 1 in each time step.  
***  crl [eval] :  {< O : Inter | ladderlogic : rlist, inputs : M1, outputs : M2 >} => {< O : Inter | ladderlogic : tail(rlist),  inputs : M1, outputs : evalll(head(rlist),M1,M2) >} in time 1 if size(rlist) > 0 .

***  crl [eval2] :  {< O : Inter | ladderlogic : rlist, inputs : M1, outputs : M2 >} => {< O : Inter | ladderlogic : rlist,  inputs : M1, outputs : M2 >} in time 1 if size(rlist) == 0 .
  
  rl [eval] :  {< O : Inter | ladderlogic : rlist, inputs : M1, outputs : M2 >} => {< O : Inter | ladderlogic : rlist,  inputs : M1, outputs : evalll2(rlist,M1,empty) >} in time 1 .

    crl [evalll2] : evalll2(rlist,M1,M2) => M2 if size(rlist) == 0 . 
    crl [evalll3] : evalll2(rlist,M1,M2) => evalll2(tail(rlist), M1, evalll(head(rlist),M1,M2)) if size(rlist) > 0 . 

  *** To evaluate each rung, we have to obtain the coil number to produce the output.
  rl [compcoil] : evalll(R,M1,M2) => insert(getcoil(R) ,evalrung(R,M1,M2) , M2) .

  *** If N1 is coil then it should be rewritten as true.
  rl [comprung] : evalrung(coil(N1),M1,M2) => true .
  *** If it sees a connective AND, evaluates the two rungs separately using AND.
  rl [comprung2] : evalrung(lland(R,R1),M1,M2) => evalrung(R,M1,M2) and evalrung(R1,M1,M2) .
  *** If it sees a connective OR, evaluates the two rungs separately using OR.
  rl [comprung3] : evalrung(llor(R,R1),M1,M2) => evalrung(R,M1,M2) or evalrung(R1,M1,M2) .
  *** If a contact is found, uses the input map M1 to find the corresponding value of the contact.
  rl [comprung4] : evalrung(cont(N1),M1,M2) => M1[N1] .
  *** If a negation of contact is found, uses the input map M1 to find the corresponding value of the contact with negation.
  rl [comprung5] : evalrung(necont(N1),M1,M2) => not M1[N1] .

  *** Getting the coil value with connectives AND as coil should be put at the end. e.g. (lland(cont(8),coil(10))))
  rl [getcoil] : getcoil(lland(R1,R2)) => getcoil(R2) .
  *** Return the coil value once the coil has been discovered.
  rl [getcoil2] : getcoil(coil(N1)) => N1 . 
  
  
endtom)

(tomod example is protecting NAT-TIME-DOMAIN .
protecting LLINTERLOCKING .
ops ladder1 ladder2 ladder3 ladder4 ladder5 : -> Rung .
ops map1 map2 : -> MapNB .
ops conf1 conf2 : -> Configuration .
eq ladder1 = lland(cont(1),lland(necont(2),coil(8))) .
eq ladder2 = lland(cont(3),lland(cont(4),(lland(cont(5),coil(9))))) .
eq ladder3 = lland(cont(6),lland(cont(7),coil(10))) .
eq map1 = 1 |-> true, 2 |-> false , 3 |-> true, 4 |-> false, 5 |-> true, 6 |-> false, 7 |-> true .
eq conf1 = < myinter : Inter | ladderlogic : ladder1 ladder2 ladder3 , inputs : map1 , outputs : empty > .

eq ladder4 = lland(llor(cont(1),cont(2)),lland(cont(3),coil(9))) .
eq ladder5 = lland(lland(cont(4),llor(lland(cont(5),necont(6)),cont(7))),lland(cont(8),coil(10))) .
eq map2 = 1 |-> true, 2 |-> false , 3 |-> false, 4 |-> true, 5 |-> true, 6 |-> false, 7 |-> false, 8 |-> true .
eq conf2 = < myinter : Inter | ladderlogic : ladder4 ladder5 , inputs : map2 , outputs : empty > .
endtom)

********            conf1
********ladder1 ────┤true├───┤negation(false)├───(8)          result: true
********ladder2 ────┤true├───┤false├───┤true├────(9)          result: false
********ladder3 ────┤false├──┤true├──────────────(10)         result: false


********            conf2 (ladder5)
********         ┌───┤5├──┤\6├──┐                      5:true   6:neg(false)
******** ───┤4├──┤              ├───┤8├───(10)    4:true                  8:true  result: true
********         └──────┤7├─────┘                           7:false      

(trew {conf1} in time <= 1 .)

(trew {conf2} in time <= 2 .)

***(trew {< myinter : Inter | ladderlogic : ladder4 lland(lland(cont(4),llor(lland(llor(cont(5),cont(20)),necont(6)),cont(7))),lland(cont(8),coil(10))) , inputs : (1 |-> true, 2 |-> false , 3 |-> false, 4 |-> true, 5 |-> false, 6 |-> false, 7 |-> false, 8 |-> true, 20 |-> false) , outputs : empty >} in time <= 10 .)